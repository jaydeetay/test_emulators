dist: bionic

env:
  global:
    - GRAVIS="https://raw.githubusercontent.com/DanySK/Gravis-CI/master/"
    - JDK="1.8" # the JDK used for running tests
  jobs:
  #  - SYS=28 ABI="google_apis;x86_64"
  #  - SYS=28 ABI="google_apis;x86"
  #  - SYS=27 ABI="google_apis;x86_64" # doesn't exist
  #  - SYS=27 ABI="google_apis;x86"
  #  - SYS=26 ABI="google_apis;x86_64"
  #  - SYS=26 ABI="google_apis;x86"
  #
  #  - SYS=25 ABI="google_apis;arm64-v8a"
  #  - SYS=25 ABI="google_apis;armeabi-v7a"
  #  - SYS=24 ABI="google_apis;arm64-v8a"
  #  - SYS=24 ABI="google_apis;armeabi-v7a"
  #  - SYS=23 ABI="google_apis;armeabi-v7a"

  #  - SYS=22 ABI="default;x86" # demo failure due to no accelerator on travis
  #  - SYS=22 ABI="default;x86_64" # demo failure due to no accelerator on travis
  #  - SYS=22 ABI="google_apis;x86" # demo failure due to no accelerator on travis
  #  - SYS=22 ABI="google_apis;x86_64" # demo failure due to no accelerator on travis
  #  - SYS=22 ABI="google_apis;armeabi-v7a"
  - SYS=22 ABI="default;armeabi-v7a"

#  - SYS=21 ABI="default;armeabi-v7a"
#  - SYS=20 ABI="default;armeabi-v7a"
#  - SYS=19 ABI="default;armeabi-v7a"
#  - SYS=18 ABI="default;armeabi-v7a"
#  - SYS=17 ABI="default;armeabi-v7a"
#  - SYS=16 ABI="default;armeabi-v7a"
#  - SYS=15 ABI="default;armeabi-v7a"
#  - SYS=14 ABI="default;armeabi-v7a"
#  - SYS=10 ABI="default;armeabi-v7a"

#matrix:
#  allow_failures:
#    #    - env: SYS=25 ABI="google_apis;arm64-v8a"
#    #    - env: SYS=24 ABI="google_apis;arm64-v8a"
#    #    - env: SYS=22 ABI="default;x86"
#    #    - env: SYS=22 ABI="default;x86_64"
#    #    - env: SYS=22 ABI="google_apis;x86"
#    #    - env: SYS=22 ABI="google_apis;x86_64"
#    - env: SYS=20 ABI="default;armeabi-v7a"
#    - env: SYS=14 ABI="default;armeabi-v7a"

language: generic
before_install:

  # Set up JDK 8 for Android SDK
  - curl "${GRAVIS}.install-jdk-travis.sh" --output ~/.install-jdk-travis.sh
  - export TARGET_JDK="${JDK}"
  - JDK="1.8" # used when running sdkmanager
  - source ~/.install-jdk-travis.sh

  # Install android tools
  - ANDROID_TOOLS=4333796 # android-28
  - export ANDROID_HOME=~/android-sdk
  - wget -q "https://dl.google.com/android/repository/sdk-tools-linux-$ANDROID_TOOLS.zip" -O android-sdk-tools.zip
  - unzip -q android-sdk-tools.zip -d ${ANDROID_HOME}
  - rm android-sdk-tools.zip
  - PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools
  # Silence warning.
  - mkdir -p ~/.android
  - touch ~/.android/repositories.cfg
  # Accept licenses before installing components, no need to echo y for each component
  - yes | sdkmanager --licenses
  # Platform tools
  - sdkmanager "emulator" "tools" "platform-tools" > /dev/null
  - sdkmanager --list | head -15
  # install older build tools (for emulator)
  - sdkmanager "build-tools;25.0.2" "platforms;android-25" > /dev/null

  # Download a pinned version of the emulator since upgrades can cause issues
  - ${ANDROID_HOME}/emulator/emulator -version
  - emulator_version=5264690 # 29.2.1.0 (build_id 5889189) ==> 28.0.23.0 (build_id 5264690)
  - sudo apt-get install -y libunwind8 libc++1
  - curl -fo emulator.zip "https://dl.google.com/android/repository/emulator-linux-$emulator_version.zip"
  - rm -rf "${ANDROID_HOME}/emulator"
  - unzip -q emulator.zip -d "${ANDROID_HOME}"
  - rm -f emulator.zip
  - ${ANDROID_HOME}/emulator/emulator -version

  # Create and start emulator.
  - sdkmanager "system-images;android-$SYS;$ABI" > /dev/null
  - sdkmanager --list | head -15
  - echo no | avdmanager create avd -n test -k "system-images;android-$SYS;$ABI"
  # emulator debug options
  #  - EMU_DEBUG="-debug all -logcat *:e -verbose -show-kernel"
  #  - EMU_ADDITIONAL_OPTIONS="-camera-back none -camera-front none -memory 2048"
  - EMU_PARAMS="-no-window -gpu swiftshader"
  #    if [[ "${SYS}${ABI}" == "25google_apis;armeabi-v7a" || "${SYS}${ABI}" == "24google_apis;armeabi-v7a" ]]; then
  #      EMU_PARAMS="-no-window -gpu swiftshader"
  #    else
  #      EMU_PARAMS="-no-boot-anim -gpu off"
  #    fi
  - |
    if [[ $ABI =~ "x86" ]]; then
      EMU_COMMAND="emulator-headless -no-accel"
    else
      EMU_COMMAND="emulator"
    fi
  # use the absolute emulator path in case older version installed (on default path)
  - $ANDROID_HOME/emulator/$EMU_COMMAND -verbose -avd test -no-audio $EMU_PARAMS $EMU_ADDITIONAL_OPTIONS ${EMU_DEBUG} &

  # install pre-compiled flutter
  - sdkmanager "platforms;android-28" "build-tools;28.0.3" > /dev/null # required by flutter
  - FLUTTER_CHANNEL=stable
  - FLUTTER_VERSION=1.9.1+hotfix.6-${FLUTTER_CHANNEL}
  - sudo apt-get install -y --no-install-recommends lib32stdc++6 libstdc++6 > /dev/null
  - wget --quiet --output-document=flutter.tar.xz https://storage.googleapis.com/flutter_infra/releases/${FLUTTER_CHANNEL}/linux/flutter_linux_v${FLUTTER_VERSION}.tar.xz
  - tar xf flutter.tar.xz > /dev/null
  - rm flutter.tar.xz
  - export PATH="$PATH":"$HOME/.pub-cache/bin"
  - export PATH=$PWD/flutter/bin:$PWD/flutter/bin/cache/dart-sdk/bin:$PATH
  - flutter doctor -v

  # Switch back to our target JDK version to build and run tests
  - JDK="${TARGET_JDK}"
  - source ~/.install-jdk-travis.sh

before_script:
  # Wait for emulator to startup.
  - ./scripts/android-wait-for-emulator.sh
  # unlock screen
#  - adb shell input keyevent 82

script:
  - cd flutter_app
  - flutter pub get
  - flutter driver lib/main.dart